
-- Leviathan Script Mini-Loader with Animation

local screenGui = Instance.new("ScreenGui")

screenGui.Name = math.random(1000000, 9999999)

screenGui.Parent = game:GetService("CoreGui")

screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling



-- Create loading frame

local mainFrame = Instance.new("Frame")

mainFrame.Name = "LeviathanLoader"

mainFrame.Size = UDim2.new(0, 300, 0, 100)

mainFrame.Position = UDim2.new(0.5, -150, 0.5, -50)

mainFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 20)

mainFrame.BorderSizePixel = 0

mainFrame.Parent = screenGui



-- Rounded corners

local corner = Instance.new("UICorner")

corner.CornerRadius = UDim.new(0, 10)

corner.Parent = mainFrame



-- RGB border

local border = Instance.new("UIStroke")

border.Thickness = 2

border.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

border.Parent = mainFrame



-- RGB gradient for border

local borderGradient = Instance.new("UIGradient")

borderGradient.Color = ColorSequence.new{

    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 200, 255)),

    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(150, 0, 255)),

    ColorSequenceKeypoint.new(0.66, Color3.fromRGB(255, 0, 150)),

    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 200, 255))

}

borderGradient.Parent = border



-- Title

local title = Instance.new("TextLabel")

title.Name = "Title"

title.Size = UDim2.new(1, 0, 0, 40)

title.Position = UDim2.new(0, 0, 0, 5)

title.BackgroundTransparency = 1

title.Font = Enum.Font.GothamBold

title.Text = "LEVIATHAN"

title.TextColor3 = Color3.fromRGB(255, 255, 255)

title.TextSize = 24

title.Parent = mainFrame



-- Loading bar background

local loadingBg = Instance.new("Frame")

loadingBg.Name = "LoadingBackground"

loadingBg.Size = UDim2.new(0.9, 0, 0, 10)

loadingBg.Position = UDim2.new(0.05, 0, 0.7, 0)

loadingBg.BackgroundColor3 = Color3.fromRGB(30, 30, 50)

loadingBg.BorderSizePixel = 0

loadingBg.Parent = mainFrame



-- Loading bar background corner

local loadingBgCorner = Instance.new("UICorner")

loadingBgCorner.CornerRadius = UDim.new(0, 5)

loadingBgCorner.Parent = loadingBg



-- Loading bar

local loadingBar = Instance.new("Frame")

loadingBar.Name = "LoadingBar"

loadingBar.Size = UDim2.new(0, 0, 1, 0)

loadingBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

loadingBar.BorderSizePixel = 0

loadingBar.Parent = loadingBg



-- Loading bar corner

local loadingBarCorner = Instance.new("UICorner")

loadingBarCorner.CornerRadius = UDim.new(0, 5)

loadingBarCorner.Parent = loadingBar



-- Loading bar gradient

local loadingGradient = Instance.new("UIGradient")

loadingGradient.Color = ColorSequence.new{

    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 200, 255)),

    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(150, 0, 255)),

    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 150))

}

loadingGradient.Parent = loadingBar



-- Status text

local status = Instance.new("TextLabel")

status.Name = "Status"

status.Size = UDim2.new(1, 0, 0, 20)

status.Position = UDim2.new(0, 0, 0.48, 0)

status.BackgroundTransparency = 1

status.Font = Enum.Font.Gotham

status.Text = "Initializing..."

status.TextColor3 = Color3.fromRGB(200, 200, 255)

status.TextSize = 14

status.Parent = mainFrame



-- Animate border gradient

spawn(function()

    local offset = 0

    while task.wait(0.01) do

        offset = (offset + 0.005) % 1

        if borderGradient and borderGradient.Parent then

            borderGradient.Offset = Vector2.new(offset, 0)

        else

            break

        end

    end

end)



-- Animation sequence

local animationSequence = {

    {text = "Checking environment...", duration = 0.4, progress = 0.2},

    {text = "Setting up verification...", duration = 0.3, progress = 0.4},

    {text = "Preparing resources...", duration = 0.5, progress = 0.7},

    {text = "Loading script...", duration = 0.4, progress = 0.9},

    {text = "Ready!", duration = 0.2, progress = 1.0}

}



-- Generate verification key

local verificationKey = tostring(math.random(1000000, 9999999)) .. "-LVT-" .. tostring(math.random(1000000, 9999999))



-- Set up global verification

getgenv().LeviathanVerification = {

    Authorized = true,

    Key = verificationKey,

    LoadTime = os.time(),

    LoaderVersion = "1.2"

}



-- Run the animation sequence

local function runAnimationSequence()

    local currentProgress = 0

    

    for i, step in ipairs(animationSequence) do

        status.Text = step.text

        

        local progressDelta = step.progress - currentProgress

        local startTime = tick()

        local endTime = startTime + step.duration

        

        while tick() < endTime do

            local alpha = (tick() - startTime) / step.duration

            local newProgress = currentProgress + (progressDelta * alpha)

            loadingBar.Size = UDim2.new(newProgress, 0, 1, 0)

            task.wait()

        end

        

        currentProgress = step.progress

        loadingBar.Size = UDim2.new(currentProgress, 0, 1, 0)

    end

    

    task.wait(0.5)

    

    -- Load the actual script

    local success, result = pcall(function()

        -- This is the obfuscated version of your GitHub UR
        loadstring(game:HttpGet("\104\116\116\112\115\58\47\47\114\97\119\46\103\105\116\104\117\98\117\115\101\114\99\111\110\116\101\110\116\46\99\111\109\47\116\51\114\109\49\110\52\116\111\114\47\108\101\118\105\97\116\104\97\110\83\99\114\105\112\116\105\107\47\109\97\105\110\47\111\102\102\105\99\105\97\108\76\101\118\105\97\116\104\97\110\63\118\61\49\55\53\50\49\52\51\52\57\55", true))()

    end)

    

    if not success then

        status.Text = "Error loading script!"

        status.TextColor3 = Color3.fromRGB(255, 50, 50)

        task.wait(2)

    end

    

    -- Fade out animation

    for i = 0, 1, 0.05 do

        mainFrame.BackgroundTransparency = i

        title.TextTransparency = i

        status.TextTransparency = i

        loadingBg.BackgroundTransparency = i

        loadingBar.BackgroundTransparency = i

        border.Transparency = i

        task.wait(0.01)

    end

    

    -- Clean up

    screenGui:Destroy()

end



-- Start the animation

task.spawn(runAnimationSequence)





